/*
 * Copyright 2019-Present Sonatype Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { readFileSync } from 'fs';
import path from 'path';

import { ComponentDetails, ComponentContainer } from '@sonatype/js-sona-types';

const ignoredFilePathPwd = path.join(process.cwd(), 'auditjs.json');

export const filterVulnerabilities = async (
  results: ComponentDetails,
  ignoreListFilePath: string = ignoredFilePathPwd,
): Promise<ComponentDetails> => {
  let json: Buffer;
  try {
    json = readFileSync(ignoreListFilePath, { flag: 'r+' });
  } catch (e) {
    return results;
  }

  try {
    const ignoredList = JSON.parse(json.toString());

    const ignoredListSet = new Set(ignoredList.ignore.map((exclusion: any) => exclusion.id));

    const newResults: ComponentContainer[] = results.componentDetails.map((result) => {
      if (result.securityData && result.securityData.securityIssues && result.securityData.securityIssues.length > 0) {
        const vulns = result.securityData.securityIssues.filter((vuln) => !ignoredListSet.has(vuln.id));

        const compContainer: ComponentContainer = {
          ...result,
          securityData: {
            securityIssues: vulns,
          },
        };

        return compContainer;
      }
      return result;
    });
    return { componentDetails: newResults };
  } catch (e) {
    throw new Error(
      `There was an issue excluding vulnerabilities likely based on your ignore list, please check ${ignoreListFilePath}, to ensure it is valid JSON, and review stack trace for more information, stack trace: ${e.stack}`,
    );
  }
};
