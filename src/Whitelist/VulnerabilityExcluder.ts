/*
 * Copyright (c) 2019-present Sonatype, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { existsSync, readFileSync } from "fs";
import path from 'path';

import { OssIndexServerResult, Vulnerability } from "../Types/OssIndexServerResult";
import { Whitelist } from "../Types/Whitelist";

const whitelistFilePathPwd = path.join(process.cwd(), 'auditjs.json');

export abstract class VulnerabilityExcluder {
  public static filterVulnerabilities(results: Array<OssIndexServerResult>, whitelistFilePath: string = whitelistFilePathPwd): Array<OssIndexServerResult> {
    if (existsSync(whitelistFilePath)) {
      let json = readFileSync(whitelistFilePath);

      let whitelist = JSON.parse(json.toString());

      let whitelistArray = new Array<Whitelist>();
      whitelist.ignore.forEach((id: any) => {
        whitelistArray.push(Object.assign(Whitelist, id));
      });

      let newResults = new Array<OssIndexServerResult>();
      results.map((result) => {
        if (result.vulnerabilities && result.vulnerabilities.length > 0) {
          let vulns = new Array<Vulnerability>();
          vulns = result.vulnerabilities.filter((vuln) => {
            return !whitelistArray.some((val) => {
              return val.id === vuln.id;
            });
          });

          let newResult: any = {};
          newResult.coordinates = result.coordinates;
          newResult.reference = result.reference;
          newResult.description = result.description;
          newResult.vulnerabilities = vulns;

          newResults.push(new OssIndexServerResult(newResult));
        } else {
          newResults.push(result);
        }
      });

      return newResults;
    }
    return results;
  }
}
