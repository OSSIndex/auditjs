/*
 * Copyright (c) 2019-present Sonatype, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import expect, { ossIndexServerResults } from '../Tests/TestHelper';
import { VulnerabilityExcluder } from './VulnerabilityExcluder';
import mock from 'mock-fs';

const json = `{
  "ignore": [ {
    "id": "test_id"
    }
  ]
}`;

const jsonWithNonApplicableId = `{
  "ignore": [ {
    "id": "qwepquepoqwe"
    }
  ]
}`;


describe("VulnerabilityExcluder", () => {
  it("should filter vulnerabilities given a valid auditjs.json", () => {
    mock({'/nonsensical': {
      'auditjs.json': json
      } 
    });
    let results = VulnerabilityExcluder.filterVulnerabilities(ossIndexServerResults, '/nonsensical/auditjs.json');
    expect(results[1].vulnerabilities?.length).to.equal(0);
    mock.restore();
  });

  it("should not filter vulnerabilities given a valid auditjs.json with an id that does not match", () => {
    mock({'/nonsensical': {
      'auditjs.json': jsonWithNonApplicableId
      } 
    });
    let results = VulnerabilityExcluder.filterVulnerabilities(ossIndexServerResults, '/nonsensical/auditjs.json');
    expect(results[1].vulnerabilities?.length).to.equal(1);
    mock.restore();
  });
});
